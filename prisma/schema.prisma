// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  STAFF
  STUDENT
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model Tenant {
  id          String       @id
  name        String?
  createdAt   DateTime     @default(now()) @map(name: "created_at")
  updatedAt   DateTime     @updatedAt @map(name: "updated_at")

  @@map(name: "tenants")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  role          UserRole  @default(STUDENT)

  isActive  Boolean @default(true)
  tenant_id String  @default(cuid())

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

// university

model course {
  courseid                  Int                         @id @default(autoincrement())
  coursename                String                      @db.VarChar(45)
  credits                   Int                         @db.SmallInt
  hours                     Int                         @db.SmallInt
  description               String                      @db.VarChar(45)
  departmentid              Int
  no_of_classes             Int                         @db.SmallInt
  no_of_seats               Int                         @db.SmallInt
  department                department                  @relation(fields: [departmentid], references: [departmentid], onDelete: NoAction, onUpdate: NoAction, map: "fk_departmentid_course")
  gradereport               gradereport[]
  student_registers_courses student_registers_courses[]
}

model department {
  departmentid    Int              @id @default(autoincrement())
  departmentname  String           @db.VarChar(45)
  description     String           @db.VarChar(45)
  budget          Decimal          @db.Decimal(45, 0)
  officeno        String           @db.VarChar(15)
  course          course[]
  employee        employee[]
  majordepartment majordepartment?
  minordepartment minordepartment?
  student         student[]
}

model employee {
  employeeid             Int                      @id @default(autoincrement())
  firstname              String                   @db.VarChar(45)
  lastname               String                   @db.VarChar(45)
  middlename             String?                  @db.VarChar(45)
  contactno              String                   @db.VarChar(15)
  address                String                   @db.VarChar(45)
  hiringdate             DateTime                 @db.Date
  ssn                    String                   @db.VarChar(9)
  departmentid           Int
  department             department               @relation(fields: [departmentid], references: [departmentid], onDelete: NoAction, onUpdate: NoAction, map: "fk_departmentid_employee")
  employee_salarydetails employee_salarydetails[]
}

model employee_salarydetails {
  accountid    Int
  date_on_bill DateTime @db.Date
  employeeid   Int
  accountname  String   @db.VarChar(45)
  salary       Float
  deductions   Float
  tax          Float
  employee     employee @relation(fields: [employeeid], references: [employeeid], onDelete: NoAction, onUpdate: NoAction, map: "fk_employeeid_salary")

  @@id([accountid, date_on_bill])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model gradereport {
  reportid     Int     @id @default(autoincrement())
  courseid     Int
  studentid    Int
  attempt      Int     @default(1) @db.SmallInt
  lettergrade  String  @db.VarChar(2)
  numericgrade Float
  semester     String  @db.VarChar(45)
  year         Int
  course       course  @relation(fields: [courseid], references: [courseid], onDelete: NoAction, onUpdate: NoAction, map: "fk_courseid_report")
  student      student @relation(fields: [studentid], references: [studentid], onDelete: NoAction, onUpdate: NoAction, map: "fk_studentid_report")
}

model majordepartment {
  majorid    Int        @id
  department department @relation(fields: [majorid], references: [departmentid], onDelete: NoAction, onUpdate: NoAction, map: "fk_majorid")
}

model minordepartment {
  minorid    Int        @id
  department department @relation(fields: [minorid], references: [departmentid], onDelete: NoAction, onUpdate: NoAction, map: "fk_minorid")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model student {
  studentid                 Int                         @id @default(autoincrement())
  firstname                 String                      @db.VarChar(45)
  middlename                String?                     @db.VarChar(45)
  lastname                  String                      @db.VarChar(45)
  ssn                       String?                     @db.VarChar(9)
  dob                       DateTime                    @db.Date
  currentaddress            String                      @db.VarChar(45)
  sex                       String                      @db.VarChar(6)
  currentphoneno            String                      @db.VarChar(15)
  email                     String                      @db.VarChar(45)
  departmentid              Int
  gradereport               gradereport[]
  department                department                  @relation(fields: [departmentid], references: [departmentid], onDelete: NoAction, onUpdate: NoAction, map: "fk_departmentid_student")
  student_registers_courses student_registers_courses[]
}

model student_registers_courses {
  studentid        Int
  courseid         Int
  registrationdate DateTime @db.Date
  course           course   @relation(fields: [courseid], references: [courseid], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_has_course_course1")
  student          student  @relation(fields: [studentid], references: [studentid], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_has_course_student1")

  @@id([studentid, courseid, registrationdate])
}
